# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PPR
else:
    import _PPR

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PPR.delete_SwigPyIterator

    def value(self):
        return _PPR.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PPR.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PPR.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PPR.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PPR.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PPR.SwigPyIterator_copy(self)

    def next(self):
        return _PPR.SwigPyIterator_next(self)

    def __next__(self):
        return _PPR.SwigPyIterator___next__(self)

    def previous(self):
        return _PPR.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PPR.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PPR.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PPR.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PPR.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PPR.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PPR.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PPR.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PPR:
_PPR.SwigPyIterator_swigregister(SwigPyIterator)


def ppr(*args):
    return _PPR.ppr(*args)
class doublevector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PPR.doublevector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PPR.doublevector___nonzero__(self)

    def __bool__(self):
        return _PPR.doublevector___bool__(self)

    def __len__(self):
        return _PPR.doublevector___len__(self)

    def __getslice__(self, i, j):
        return _PPR.doublevector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PPR.doublevector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PPR.doublevector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PPR.doublevector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PPR.doublevector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PPR.doublevector___setitem__(self, *args)

    def pop(self):
        return _PPR.doublevector_pop(self)

    def append(self, x):
        return _PPR.doublevector_append(self, x)

    def empty(self):
        return _PPR.doublevector_empty(self)

    def size(self):
        return _PPR.doublevector_size(self)

    def swap(self, v):
        return _PPR.doublevector_swap(self, v)

    def begin(self):
        return _PPR.doublevector_begin(self)

    def end(self):
        return _PPR.doublevector_end(self)

    def rbegin(self):
        return _PPR.doublevector_rbegin(self)

    def rend(self):
        return _PPR.doublevector_rend(self)

    def clear(self):
        return _PPR.doublevector_clear(self)

    def get_allocator(self):
        return _PPR.doublevector_get_allocator(self)

    def pop_back(self):
        return _PPR.doublevector_pop_back(self)

    def erase(self, *args):
        return _PPR.doublevector_erase(self, *args)

    def __init__(self, *args):
        _PPR.doublevector_swiginit(self, _PPR.new_doublevector(*args))

    def push_back(self, x):
        return _PPR.doublevector_push_back(self, x)

    def front(self):
        return _PPR.doublevector_front(self)

    def back(self):
        return _PPR.doublevector_back(self)

    def assign(self, n, x):
        return _PPR.doublevector_assign(self, n, x)

    def resize(self, *args):
        return _PPR.doublevector_resize(self, *args)

    def insert(self, *args):
        return _PPR.doublevector_insert(self, *args)

    def reserve(self, n):
        return _PPR.doublevector_reserve(self, n)

    def capacity(self):
        return _PPR.doublevector_capacity(self)
    __swig_destroy__ = _PPR.delete_doublevector

# Register doublevector in _PPR:
_PPR.doublevector_swigregister(doublevector)

class doublemat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PPR.doublemat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PPR.doublemat___nonzero__(self)

    def __bool__(self):
        return _PPR.doublemat___bool__(self)

    def __len__(self):
        return _PPR.doublemat___len__(self)

    def __getslice__(self, i, j):
        return _PPR.doublemat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PPR.doublemat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PPR.doublemat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PPR.doublemat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PPR.doublemat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PPR.doublemat___setitem__(self, *args)

    def pop(self):
        return _PPR.doublemat_pop(self)

    def append(self, x):
        return _PPR.doublemat_append(self, x)

    def empty(self):
        return _PPR.doublemat_empty(self)

    def size(self):
        return _PPR.doublemat_size(self)

    def swap(self, v):
        return _PPR.doublemat_swap(self, v)

    def begin(self):
        return _PPR.doublemat_begin(self)

    def end(self):
        return _PPR.doublemat_end(self)

    def rbegin(self):
        return _PPR.doublemat_rbegin(self)

    def rend(self):
        return _PPR.doublemat_rend(self)

    def clear(self):
        return _PPR.doublemat_clear(self)

    def get_allocator(self):
        return _PPR.doublemat_get_allocator(self)

    def pop_back(self):
        return _PPR.doublemat_pop_back(self)

    def erase(self, *args):
        return _PPR.doublemat_erase(self, *args)

    def __init__(self, *args):
        _PPR.doublemat_swiginit(self, _PPR.new_doublemat(*args))

    def push_back(self, x):
        return _PPR.doublemat_push_back(self, x)

    def front(self):
        return _PPR.doublemat_front(self)

    def back(self):
        return _PPR.doublemat_back(self)

    def assign(self, n, x):
        return _PPR.doublemat_assign(self, n, x)

    def resize(self, *args):
        return _PPR.doublemat_resize(self, *args)

    def insert(self, *args):
        return _PPR.doublemat_insert(self, *args)

    def reserve(self, n):
        return _PPR.doublemat_reserve(self, n)

    def capacity(self):
        return _PPR.doublemat_capacity(self)
    __swig_destroy__ = _PPR.delete_doublemat

# Register doublemat in _PPR:
_PPR.doublemat_swigregister(doublemat)



